import { Cache, APIRunPromptResponse, ErrorResponse, RuntimeOptions, StreamEvents } from "./types"

/**
 * The base client for the PromptPal JS SDK.
 */
class BaseClient {
  /** execute path. defined by PromptPal: https://github.com/PromptPal/PromptPal/blob/master/routes/app.go#L84 */
  static readonly executePath = "/api/v1/public/prompts/run/{pid}";
  /** endpoint of the PromptPal server. should a valid host */
  private endpoint: string;
  /** API token that generated by PromptPal project. should be pair with the endpoint */
  private token: string;

  /** cache for the PromptPal Node.js SDK */
  protected cache?: Cache;

  protected defaultTimeout = 10_000;

  /**
   * create a PromptPal client
   *
   * ```ts
   * const client = new PromptPal('http://127.0.0.1:7788', process.env.PROMPTPAL_TOKEN)
   * ```
   * @param endpoint PromptPal server entry point {@link endpoint}
   * @param token API token that generated by PromptPal project {@link token}
   */
  constructor(endpoint: string, token: string, options: RuntimeOptions = {}) {
    this.endpoint = endpoint;
    this.token = token;

    if (options.cache === undefined) {
      this.cache = new Map<string, string>();
    }
    if (options.cache) {
      this.cache = options.cache;
    }

    if (options.defaultTimeout) {
      this.defaultTimeout = options.defaultTimeout;
    }
  }

  private async doPost<V>(params: {
    url: string,
    data: V,
    signal?: AbortSignal,
  }) {
    if (!this.token) {
      throw new Error("PromptPal: No token found")
    }
    const { url, data, signal } = params

    const requestURL = url.startsWith("http") ? url : `${this.endpoint}${url}`

    const response = await fetch(requestURL, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "User-Agent": "PromptPal-JSSDK/0.2.2",
        Authorization: `API ${this.token}`,
      },
      body: JSON.stringify(data),
      signal,
    })

    if (!response.ok) {
      const errMsg: ErrorResponse = await response.json()
      throw new Error(`${errMsg.code}: ${errMsg.error}`)
    }

    return response
  }

  protected async httpPost<R, V extends object>(
    url: string,
    data: V,
    signal?: AbortSignal,
  ): Promise<R> {
    const response = await this.doPost({
      url,
      data,
      signal,
    })
    if (!this.token) {
      throw new Error("PromptPal: No token found")
    }

    return response.json() as R
  }

  protected async httpPostStream<V extends object>(
    url: string,
    data: V,
    events: StreamEvents<APIRunPromptResponse>,
    signal?: AbortSignal,
  ): Promise<APIRunPromptResponse> {
    const response = await this.doPost({
      url,
      data,
      signal,
    })

    const reader = response.body?.getReader();

    if (!reader) {
      throw new Error("body reader not found");
    }

    const result: string[] = []

    while (true) {
      const { done, value } = await reader.read();
      // event:message\ndata:{"id":"dgJe7a8WGVZj","message":"안녕하세요","tokenCount":-1}\n\n
      const str = new TextDecoder("utf-8").decode(value)
      const rawMsgs = str.split("\n").filter(s => s.startsWith('data:')).map(x => x.trim())
      rawMsgs.forEach(msg => {
        const c = JSON.parse(msg.slice(5)) as APIRunPromptResponse;
        result.push(c.message)
        events.onData(c);
      })

      if (done) {
        events.onEnd()
        break
      }
    }

    return {
      id: '',
      message: result.join(''),
      tokenCount: -1,
    }
  }

  protected getCacheKey(prompt: string, variables: Record<string, any>): string {
    let result = prompt + ":";
    const vars = Object.values(variables);
    vars.sort();
    vars.forEach((value) => {
      if (typeof value === "object") {
        // TODO, not support complex types
        return result + Math.random();
      }
      if (typeof value === "string") {
        result += value;
      }
      if (typeof value === "number") {
        result += value;
      }
    });
    return result;
  }
}

export default BaseClient

